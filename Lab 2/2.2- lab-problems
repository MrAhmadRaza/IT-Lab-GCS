-----------------------------------------------------------------------
2.1: In this programme, we will analyze the size of basic data types.
-----------------------------------------------------------------------
#include <iostream>
using namespace std;
 
int main() 
{
    cout << "\n\n Find Size of fundamental data types :\n";
	  cout << "------------------------------------------\n";
    cout << " The sizeof(char) is :          " << sizeof(char) << " bytes \n" ;
    cout << " The sizeof(short) is :         " << sizeof(short) << " bytes \n" ;
    cout << " The sizeof(int) is :           " << sizeof(int) << " bytes \n" ;
    cout << " The sizeof(long) is :          " << sizeof(long) << " bytes \n" ;
    cout << " The sizeof(long long) is :     " << sizeof(long long) << " bytes \n";
    cout << " The sizeof(float) is :         " << sizeof(float) << " bytes \n" ;
    cout << " The sizeof(double) is :        " << sizeof(double) << " bytes \n";
    cout << " The sizeof(long double) is :   " << sizeof(long double) << " bytes \n";
    cout << " The sizeof(bool) is :          " << sizeof(bool) << " bytes \n\n";
    return 0;
}

// The size of data type represtents, how large number a type can hold.
// We use these different types according to our requirements, It depends
// on the the number we are working with. 
------------------------------------------------------------------------------
2.2: A simple program to understand the data types and there respective values.
------------------------------------------------------------------------------
#include <iostream>
using namespace std;
 
int main() 
{
   char gender = 'F';             // char is single-quoted
   bool isEmployed = true;         // true(non-zero) or false(0)
   unsigned short numOfsons = 2; // [0, 255]
   short yearOfAppt = 2009;      // [-32767, 32768]
   unsigned int YearlyPackage = 1500000;   // [0, 4294967295]
   double height = 79.48;       // With fractional part
   float gpa = 4.69f;           // Need suffix 'f' for float
   long totalDrawan = 12047235L;     // Suffix 'L' for long
   long long balance = 995324987LL;  // Need suffix 'LL' for long long int  

   cout << " The Gender is : " << gender << endl;
   cout << " Is she married? : " << isEmployed << endl;
   cout << " Number of sons she has : " << numOfsons << endl;
   cout << " Year of her appointment : " << yearOfAppt << endl;
   cout << " Salary for a year : " << YearlyPackage << endl;
   cout << " Height is : " << height << endl;
   cout << " GPA is " << gpa << endl;
   cout << " Salary drawn upto : " << totalDrawan << endl;
   cout << " Balance till : " << balance << endl;   
   return 0;
}

// ** Remember, this is a good practice to use data type according to the range of values of variable 
// you want to work with. Always avoid to hold extra memory which is not needed. 
// For example, if you want to store 'age' of a person: Normally a person's age could be [0-100]. 
//      So 'unsigned short' is best type to store age. 

-------------------------------------
2.3: Conditional Structures (if-else)
-------------------------------------
//The if statement evaluates the test expression inside parenthesis.
//If test expression is evaluated to true, statements inside the body of if is executed.
//If test expression is evaluated to false, statements inside the body of if is skipped.
 eg. 
 int test = 5;
 if (test < 10)
 {
 	// Code
 }
 // Code after if
 -------------------------
 2.3 (a) Simple if example
 -------------------------
// Program to print positive number entered by the user
// If user enters negative number, it is skipped
#include <iostream>
using namespace std;
int main() 
{
    int number;
    cout << "Enter an integer: ";
    cin >> number;
    // checks if the number is positive
    if ( number > 0) 
    {
        cout << "You entered a positive integer: " << number << endl;
    }
    cout << "This statement is always executed.";
    return 0;
}
 -------------------------
 2.3 (b) if-else example
 -------------------------
// Program to check whether an integer is positive or negative
// This program considers 0 as positive number
#include <iostream>
using namespace std;
int main() 
{
    int number;
    cout << "Enter an integer: ";
    cin >> number;
    if ( number >= 0)
    {
        cout << "You entered a positive integer: " << number << endl;
    }
    
    else
    {
        cout << "You entered a negative integer: " << number << endl;
    }
    cout << "This line is always printed.";
    return 0;
}
-------------------------------
 2.3 (c) Nested if-else example
 ------------------------------
// Program to check whether an integer is positive, negative or zero
#include <iostream>
using namespace std;
int main() 
{
    int number;
    cout << "Enter an integer: ";
    cin >> number;
    if ( number > 0)
    {
        cout << "You entered a positive integer: " << number << endl;
    }
    else if (number < 0)
    {
        cout<<"You entered a negative integer: " << number << endl;
    }
    else
    {
        cout << "You entered 0." << endl;
    }
    cout << "This line is always printed.";
    return 0;
}
----------------------
2.3(d) if-else problem
----------------------
// Check Whether Number is Even or Odd using if else
#include <iostream>
using namespace std;
int main()
{
    int n;
    cout << "Enter an integer: ";
    cin >> n;
    if ( your code )
        cout << n << " is even.";
    else
        cout << n << " is odd.";
    return 0;
}
-----------------------
2.3(e) if-else problem
-----------------------
//Program to find maximum using if-else

Below is step by step descriptive logic to find maximum.

Input two numbers from user. Store it in some variable say num1 and num2.
Check if(num1 > num2) then print num1 is maximum.
Check else if(num2 > num1) then print num2 is maximum.
Check else,  then both the numbers are equal.

// Basic Structure
#include <iostream>

using namespace std;
int main()
{
    int num1, num2;

    /* Input two numbers from user */
    cout << "Enter two numbers: ";
    cin >> num1 >> num2;
    
    // your code to perform described job
    
    return 0;
}
-----------------------------------------------------------
2.4 Switch Case
-----------------------------------------------------------
// Simple Syntex of Switch Case
switch ( <expression> or <variable> ) 
{
	case value1:
	  //Block 1 Code Here
	  break;

	case value2:
	  //Block 1 Code Here
	  break;
	...

	default:
	  Code to execute for not match case
	  break;
}

-----------------------------------------------------------
2.4(a) Switch Example
-----------------------------------------------------------
//Simple Switch Example Program for find Vowels
/* Switch Programs, Find Vowels,Control Programs,C++ Examples */

// Header Files
#include<iostream>

using namespace std;

//Main Function
int main() {
   // Local Variable 'ch' Declaration
   char ch;
   
   cout << "Enter the Letter (In Capital Letter): ";
   cin >> ch;

   //Switch Case Check
   switch (ch) {
      case 'A': cout << "Your Character Is A.Your Character is Vowel\n";
         break;

      case 'E': cout << "Your Character Is E.Your Character is Vowel\n";
         break;

      case 'I': cout << "Your Character Is I.Your Character is Vowel\n";
         break;

      case 'O': cout << "Your Character Is O.Your Character is Vowel\n";
         break;

      case 'U': cout << "Your Character Is U.Your Character is Vowel\n";
         break;

      default: cout << "Your Character is Not Vowel.Otherwise Not a Capital Letter\n";
         break;
   }

   //Main Function return Statement
   return 0;
}
-----------------------------------------------------------
2.4(b):(Problem) Write a C++ program, which takes two integer operands 
and one operator from the user, performs the operation and 
then prints the result. (Consider the operators +, -, *, /, %).
-----------------------------------------------------------
// Remember: Always design a simple algorithm before program a problem.
// Algorithm
Step 1: Start
Step 2: Read x and y values
Step 3: Read option + or – or * or / or %
Step 4: If option is ‘+’ res = x + y
Step 5: If option is ‘-’ res = x - y
Step 6: If option is ‘*’ res = x * y
Step 7: If option is ‘/’ res = x / y
Step 8: If option is ‘%’ res = x % y
Step 9: If option does not match with + or – or * or / or %
           Print select option +, -, *, /, /, % only
Step 10: Print x, option, y, res values
Step 11: Stop

// Basic Structure 
#include <iostream>

using namespace std;
int main()
{
   int a, b, c;
   char op;
   
   cout << "Enter your operator(+, -, /, *, %)\n" ;
   cin >> op;
   cout << "Enter the values of a and b\n");
   cin >> a >> b;

   switch(op) // We will decide operation upon operater entered by user
   {
      case your code: // Block for addition
      	c = your code;
        cout << "Addition of two numbers is "<< c;
        break;
      case your code: // Block for subtraction
      	 c = your code;
         cout << "Substraction of two numbers is " << c;
         break;
      case your code: //Block for multiplication
      	 c = your code;
         cout << "Multiplication of two numbers is " << c;
         break;
      case your code: // Block for remainder 
      	 c = your code;
         cout << "Remainder of two numbers is " << c;
         break;
      case your code: // Block for quotient
      	 c = your code;
         cout << "Quotient of two numbers is" << c;
         break;
      default: 
      	cout << "Invalid operator";
         break;
   }
   return 0;
}
