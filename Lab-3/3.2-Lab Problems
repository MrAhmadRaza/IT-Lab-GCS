---------------------------
for loop Example 3.1
---------------------------
// Compute sum of first 10 natural numbers
// Here We know the the exact number of iterations.
// So best structure is for loop
/*
Simple Algorithm:
  -start
  -iterate over 10 natural numbers (1 to 10)
    -add the loop numbers to find sum
  -end
*/

#include <iostream>
using namespace std;
int main()
{
    int i,sum=0;
    cout << "--------------------------------------------------\n";
    cout << "Compute the sum of first 10 natural numbers:\n";
    cout << "--------------------------------------------------\n";
    for (i = 1; i <= 10; i++) # iterate over first 10 numbers 
    {
		    sum=sum+i;
    }
     cout << "\n The sum of first 10 natural numbers: "<<sum << endl;
}

----------------------
for loop Problem 3.2
----------------------
// Find the factorial of a number 
// Again we know the number of iterations, So best case is for loop
// Note: factorial of 5 is 1*2*3*4*5.
Simple Algorithm:
  -start
  -Input a number to find factorial
  -iterate from 1 to inut number
    -multiply the loop numbers to find factorial
  -end
*/

#include <iostream>
using namespace std;
int main()
{
    int num1,factorial=1;
    cout << "\n\n Find the factorial of a number:\n";
    cout << " Input a number to find the factorial: ";
    cin>> num1;
    for(your code)
    {
        your code
    }
    cout<<" The factorial of the given number is: "<<factorial<<endl;
    return 0;
 }
--------------------------------------
for loop problem 3.3 (Fibonacci Series)
--------------------------------------
/* Remember, a fibonacci number is the sum of previous two numbers.
 e.g first 5 fibonacci terms are: 0 1 1 2 3.
 Here we know the number of iterations. So, the best case is for loop. 
 Remember, continue command skip the remaining statements in a loop.
 */
 
#include <iostream>
using namespace std;
int main()
{
    int n, t1 = 0, t2 = 1, nextTerm = 0;
    cout << "Enter the number of terms: ";
    cin >> n;
    cout << "Fibonacci Series: ";
    for (int i = 1; i <= n; ++i)
    {
        // Prints the first two terms.
        if(i == 1)
        {
            cout << " " << t1;
            continue; // Skipt the next statements 
        }
        if(i == 2)
        {
            cout << t2 << " ";
            continue; // Skipt the next statements
        }
	// Now We have two fibonacci numbers in t1 and t2
        nextTerm = your code // compute next number
        t1 = your code; // move t1 to t2 
        t2 = your code; // move t2 to next term
        
        cout << nextTerm << " ";
    }
    return 0;
}


-----------------------
While loop Example 3.4
-----------------------
Compute average of numbers entered by the user.
-Here we will input the numbers from user and compute average.
-In this problem, We do not know exactly the number of iterations at compile time and also
at-least one iteration is not needed (as in do-while). So, the best case is while loop.

#include<iostream>
using namespace std;
int main()
{
	int sum = 0, num_of_input, counter = 0, num;
	float avg;
	cout << "For how much numbers do you want to compute average: "
	cin >> num_of_input;
	while (counter < num_of_input)
	{
		cout << counter << " / " << num_of_input << ": Enter the number: ";
		cin >> num;
		sum = sum + num // Compute sum to average the numbers
	}
	
	avg = sum / num_of_input;
	cout << "Average is: " << avg;
	return 0;
}
-----------------------
While loop Problem 3.5
-----------------------
Compute percentage of marks entered by the user.
-We will create a general program to compute average of marks.
-In this case we do not the exact number of iterations at compile time and 
also at-least one iteration is not needed. So the best case is while loop.
Simple Algorithm:
 - Input the numbere of subjects from user
   - iterate over the number of subjects using while loop
   	-Input obtained marks in each subject
	-Input total marks in each subject
   - Compute percentage. (obtained / total) * 100

#include<iostream>
using namespace std;
int main()
{
	int num_subjects, marks, counter = 0;
	float percentage, obtained_marks, total_marks;
	cout << "Enter number of subjects: ";
	cin >> num_subjects;
	while(your code) // to iterate over the number of subjects
	{
		cout << "Enter the obtained marks in subject " << counter+1 << " : ";
		cin >> marks;
		your code // code to add obtained marks
		cout << "Enter the total marks in subject " << counter+1 << " : ";
		cin >> marks;
		your code // code to add total marks
	}
	
	your code // a single line of statement to compute percentage. implement (obtained / total) * 100
	cout << "You got " << percentage << "% marks.";
	return 0;
}

-------------------------
While loop Problem 3.6
-------------------------

--------------------------
do-While loop Example 3.7
--------------------------
Calculate sum of positive numbers entered by user.
- We will compute sum of numbers while user enter positive numbers.
- Here we need at least one input to compute sum. So, best case is do-while.

#include<iostream>
using namespace std;
int main()
{
	int sum = 0, num;
	do
	{
		cout << "Enter a positive number: (enter -ve number to stop the loop)\n";
		cin >> num;
		if (num > 0):{
			sum = sum + num;
		}
	}while(num > 0); // iterate while the number is positive
	
	cout << "Sum of positive numbers is: " << sum;
	return 0;
}

--------------------------
do-While loop Example 3.7
--------------------------








